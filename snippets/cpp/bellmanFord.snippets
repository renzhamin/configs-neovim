snippet algo_bellmanFord
	#define MX INT_MAX
	#define relax(x) for(int i=0;i<m;i++){if(d[E[i].u]==MX) continue;\
		tmp = d[E[i].u]+E[i].w; if(tmp<d[E[i].v]){x} }

	const int Nmx=1e2+1;
	const int Emx=Nmx*Nmx;

	struct edge{
		ll u,v,w;
	}E[Emx];

	ll d[Nmx],n,m,u,v,w,q,tmp;
	bool negCycle;

	void bellmanFord(int source,bool checkCycle=0){
		for(int i=0;i<=n;i++) d[i]=MX;
		d[source]=0;

		for(int j=1;j<n;j++){
			relax( d[E[i].v] = tmp; )
		}

		if(!checkCycle) return;

		negCycle=0;
		relax( negCycle=1; break; )
	}


